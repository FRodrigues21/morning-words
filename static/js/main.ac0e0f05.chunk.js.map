{"version":3,"sources":["components/editor.js","components/month_timeline.js","scenes/home.js","index.js","../node_modules/sentiment/languages sync /^/.*/index$"],"names":["getSentiment","words","Sentiment","sentiment","console","dir","analyze","score","Editor","_ref","_ref$data","data","disabled","updated","minLength","onChange","onSubmit","length","onStats","match","percentage","Math","floor","react_default","a","createElement","ProgressBar","now","label","concat","bsStyle","FormGroup","controlId","FormControl","name","value","componentClass","placeholder","rows","readOnly","HelpBlock","ButtonToolbar","Button","onClick","MonthTimeline","renderTimeline","y","m","d","_this$props","_this","props","onDaySelect","goalCheck","_timeline","_days","moment","daysInMonth","_loop","_d","push","key","Label","Number","format","render","_this$props2","year","month","day","Component","_moment","INITIAL_EDITOR","formatDate","Home","state","history","currentDate","editor","loadWords","localStorage","getItem","setState","JSON","parse","getWordsByDate","date","Object","objectSpread","componentWillMount","autoSave","_","debounce","componentDidMount","e","_e$target","target","defineProperty","_currentTime","setItem","stringify","_item","Grid","PageHeader","month_timeline","assign","ReactDOM","home","document","getElementById","map","./en/index","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/main.ac0e0f05.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  FormGroup,\r\n  FormControl,\r\n  HelpBlock,\r\n  ButtonToolbar,\r\n  Button,\r\n  ProgressBar\r\n} from \"react-bootstrap\";\r\nimport sentiment from \"sentiment\";\r\n\r\nconst getSentiment = words => {\r\n  let Sentiment = new sentiment();\r\n  console.dir(Sentiment.analyze(words));\r\n  return Sentiment.analyze(words).score > 0;\r\n};\r\n\r\nconst Editor = ({\r\n  data: { words, disabled, updated },\r\n  minLength,\r\n  onChange,\r\n  onSubmit,\r\n  onStats\r\n}) => {\r\n  const length = words ? words.match(/\\S+/g).length : 0;\r\n  const percentage = words ? Math.floor((length * 100) / minLength) : 0;\r\n  return (\r\n    <form>\r\n      <ProgressBar\r\n        now={percentage}\r\n        label={`${percentage}% (${length})`}\r\n        bsStyle={length >= minLength ? \"success\" : null}\r\n      />\r\n      <FormGroup controlId=\"formControlsTextarea\">\r\n        <FormControl\r\n          name=\"words\"\r\n          value={words}\r\n          onChange={onChange}\r\n          componentClass=\"textarea\"\r\n          placeholder=\"Write here, let's go!\"\r\n          rows={20}\r\n          readOnly={disabled}\r\n        />\r\n      </FormGroup>\r\n      <HelpBlock>\r\n        Your words of the day are stored locally, and can only be viewed on this\r\n        browser.\r\n      </HelpBlock>\r\n      <ButtonToolbar>\r\n        <Button bsStyle=\"primary\" onClick={onSubmit}>\r\n          {updated ? `Saved at ${updated}` : \"Save\"}\r\n        </Button>\r\n\r\n        <Button bsStyle={getSentiment(words) ? \"success\" : \"danger\"}>\r\n          Sentiment: {getSentiment(words) ? \"Positive\" : \"Negative\"}\r\n        </Button>\r\n      </ButtonToolbar>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport { Label } from 'react-bootstrap';\r\n\r\nclass MonthTimeline extends Component {\r\n  renderTimeline = (y, m, d) => {\r\n    const { onDaySelect, goalCheck } = this.props;\r\n    let _timeline = [];\r\n    let _days = moment(`${y}-${m}`, 'YYYY-MM').daysInMonth();\r\n    for (let _d = 1; _d <= _days; _d++) {\r\n      _timeline.push(\r\n        <span key={_d}>\r\n          <Label\r\n            bsStyle={\r\n              _d === Number(d) ? 'info' : goalCheck(_d) ? 'success' : 'primary'\r\n            }\r\n            onClick={() => onDaySelect(_d)}\r\n          >\r\n            {_d === Number(d) ? `${_d} ${moment().format('MMMM YYYY')}` : _d}\r\n          </Label>{' '}\r\n        </span>\r\n      );\r\n    }\r\n    return _timeline;\r\n  };\r\n\r\n  render = () => {\r\n    const { year, month, day } = this.props;\r\n    return <div>{this.renderTimeline(year, month, day)}</div>;\r\n  };\r\n}\r\n\r\nexport default MonthTimeline;\r\n","import React, { Component } from \"react\";\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport { Grid, PageHeader } from \"react-bootstrap\";\r\nimport { Editor, MonthTimeline } from \"../components\";\r\n\r\nconst _moment = moment();\r\nconst INITIAL_EDITOR = { words: \"\", updated: null };\r\nconst formatDate = ({ year, month, day }) =>\r\n  moment(`${year}-${month}-${day}`, \"YYYY-MM-D\").format(\"YYYY/MM/DD\");\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    minLength: 750,\r\n    history: [],\r\n    currentDate: {\r\n      year: _moment.format(\"YYYY\"),\r\n      month: _moment.format(\"MM\"),\r\n      day: _moment.format(\"D\")\r\n    },\r\n    editor: INITIAL_EDITOR\r\n  };\r\n\r\n  loadWords = () => {\r\n    if (localStorage.getItem(\"mw\") != null)\r\n      this.setState({ history: JSON.parse(localStorage.getItem(\"mw\")) });\r\n  };\r\n\r\n  getWordsByDate = date => {\r\n    if (this.state.history[formatDate(date)] != null)\r\n      this.setState({\r\n        editor: {\r\n          ...this.state.editor,\r\n          words: this.state.history[formatDate(date)]\r\n        }\r\n      });\r\n    else this.setState({ editor: { ...this.state.editor, ...INITIAL_EDITOR } });\r\n  };\r\n\r\n  componentWillMount = () => {\r\n    this.autoSave = _.debounce(this.onSubmit, 500); // Let only one call get executed per half a second\r\n    this.loadWords();\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.getWordsByDate(this.state.currentDate);\r\n  };\r\n\r\n  onChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ editor: { ...this.state.editor, [name]: value } });\r\n    this.autoSave();\r\n  };\r\n\r\n  onSubmit = () => {\r\n    let _currentTime = moment().format(\"HH:mm:ss\");\r\n    this.setState(\r\n      {\r\n        editor: { ...this.state.editor, updated: _currentTime },\r\n        history: {\r\n          ...this.state.history,\r\n          [formatDate(this.state.currentDate)]: this.state.editor.words\r\n        }\r\n      },\r\n      () => localStorage.setItem(\"mw\", JSON.stringify(this.state.history))\r\n    );\r\n  };\r\n\r\n  // Check if goal was reached on a certain day of current year and month\r\n  goalCheck = d => {\r\n    let _item = this.state.history[\r\n      formatDate({ ...this.state.currentDate, day: d })\r\n    ];\r\n    return _item != null && _item.match(/\\S+/g).length >= this.state.minLength;\r\n  };\r\n\r\n  onDaySelect = d => {\r\n    // Disable click on future days\r\n    if (d <= _moment.format(\"D\"))\r\n      this.setState(\r\n        {\r\n          currentDate: { ...this.state.currentDate, day: d },\r\n          editor: {\r\n            ...this.state.editor,\r\n            disabled: !(d === Number(_moment.format(\"D\")))\r\n          }\r\n        },\r\n        () => {\r\n          this.getWordsByDate(this.state.currentDate);\r\n        }\r\n      );\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <Grid>\r\n        <PageHeader>\r\n          Morning Words <small>Free your mind in 750 words</small>\r\n        </PageHeader>\r\n        <center>\r\n          <MonthTimeline\r\n            {...this.state.currentDate}\r\n            goalCheck={this.goalCheck}\r\n            onDaySelect={this.onDaySelect}\r\n          />\r\n        </center>\r\n        <br />\r\n        <Editor\r\n          data={this.state.editor}\r\n          minLength={this.state.minLength}\r\n          onChange={this.onChange}\r\n          onSubmit={this.onSubmit}\r\n        />\r\n      </Grid>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Home from './scenes/home.js';\r\n\r\nReactDOM.render(<Home />, document.getElementById('root'));\r\n","var map = {\n\t\"./en/index\": 32\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 63;"],"sourceRoot":""}